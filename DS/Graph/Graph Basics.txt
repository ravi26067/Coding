 * Graph: Represents a pair-wise relationship between a set of objects.
 * 1) Vertex(nodes)
 * 2) Edge(arc):determine relationship between vertices
 * Types:
 * Directed(di-graph): have pair of ordered vertices (u,v)
 * Un-Directed Graph: have pair of unordered vertices ,(u,v) and (v,u) are not same.
 * Graph Applications
 * 1.Social Networks - Facebook,LinkedIn etc
 * 2.City-Road Network 
 * 3.Precedence Constraints
 * Graph Representation:
 * 1.Adjacency matrix: Represent graph V as VxV(0-1) matrix where Aij = 1 means that vertex i and j are connected.
 * Advantage: a.Easy to implement
 * 			  b.Removing edge takes O(1)
 * 			  c.Querries like weather there is edge from vertex u to v are efficient and can be done in O(1).
 * Cons:a.Require more space O(V^2).
 * 		b.Adding vertex is O(V^2) time.
 * 2.Adjacency list: An array of list is used. Size of array is equal to number of vertices and each entry of array corresponds 
 * 					 to linked list of vertices adjacent to this index.
 * Pros: a.Saves space O(|V|+ |E|), worst case O(V^2).
 * 		 b.Adding a vertex is easier. 
 * Cons: Queries like weather there is edge from vertex u to v are not efficient and takes O(V).