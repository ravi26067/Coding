Q1. https://leetcode.com/problems/permutations/

CODE :

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        /*
        []
        [1]
        [2,1][1,2]
        [3,2,1][2,3,1][2,1,3][1,2,3][1,3,2][3,1,2]
        */
        List<List<Integer>> res = new ArrayList();
        Queue<List<Integer>> perm = new LinkedList();
        perm.add(new ArrayList());
        for(int curr:nums){
            int m = perm.size();
            for(int k=0; k < m;k++){
                List<Integer> oldperm = perm.poll();
                int n = oldperm.size();
                for(int i=0;i<=n;i++){
                    List<Integer> newperm = new ArrayList(oldperm);
                    newperm.add(i,curr);
                    //System.out.println();
                    if(newperm.size()==nums.length)
                        res.add(newperm);
                    else
                        perm.add(newperm);
                }
            }
        }
        return res;
    }
}



Q2. https://leetcode.com/problems/next-greater-element-i/

CODE :

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        /*
        [1]
        [3,4,-1,-1];
        */
        int n1 = nums1.length;
        int n2 = nums2.length;
        int res[] = new int[n1];
        Map<Integer,Integer> mp = new HashMap();
        Stack<Integer> st = new Stack();
        for(int i = n2-1;i>=0;i--){
            if(i==n2-1){
                mp.put(nums2[i],-1);
                st.push(nums2[i]);
            }
            else{
                while(true){
                    if(st.isEmpty())
                        break;
                    Integer tmp = st.pop();
                    if(tmp>nums2[i]){
                        mp.put(nums2[i],tmp);
                        st.push(tmp);
                        st.push(nums2[i]);
                        break;
                    }
                }
                if(!mp.containsKey(nums2[i])){
                        mp.put(nums2[i],-1);
                        st.push(nums2[i]);
                }
            }
        }
        
        for(int i=0;i<n1;i++){
            res[i] = mp.get(nums1[i]);
        }
        return res;
    }
}

